<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Arif Pehlivan</title>
        <link>http://mrpehlivan.github.io/</link>
        <description>Arif Pehlivan</description>
        <generator>Hugo -- gohugo.io</generator><language>tr</language><managingEditor>m.arifpehlivan@gmail.com (Arif Pehlivan)</managingEditor>
            <webMaster>m.arifpehlivan@gmail.com (Arif Pehlivan)</webMaster><lastBuildDate>Sat, 21 Apr 2018 00:00:00 &#43;0000</lastBuildDate>
            <atom:link href="http://mrpehlivan.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>Springboot ile CRUD Projesi Oluşturma</title>
    <link>http://mrpehlivan.github.io/posts/spring-boot-example/</link>
    <pubDate>Sat, 21 Apr 2018 00:00:00 &#43;0000</pubDate>
    <author></author>
    <guid>http://mrpehlivan.github.io/posts/spring-boot-example/</guid>
    <description><![CDATA[<p>Springboot da proje oluşturmak spring boot initializer ile artık daha kolay bir hale geldi. Bu yazıda oluşturacağımız proje standart bir Create, Read, Update ve Delete işlemleri yapacağından projede Spring Data , PostgreSQL, Spring Mvc Web bağımlılıklarını kullanacağız.</p>
<p>Örnek ekran görüntüsü :</p>
<figure>
     
</figure>

<p>Oluşturduğumuz projemizi indirmiş olduğumuz path den kullandığınız her hangi bir ide(integrated development environment) ile açabilirsiniz. Ben Intellij ide ile geliştirmeleri yapacağım.</p>
<figure>
     
</figure>

<p>Intellij ide de açılan ekranda Import Project&rsquo;e tıklıyoruz.</p>
<figure>
     
</figure>

<p>Paket yönetim için Gradle&rsquo;ı seçiyoruz ve Next&rsquo;e tıklıyoruz.</p>
<p><figure>
     
</figure>

Projenin konfigürasyon ayarlarını yapıyoruz ve Finish&rsquo;e tıklıyoruz.</p>
<figure>
     
</figure>

<p>Aşağıdaki resimde projenin yapısını görebilirsiniz.</p>
<figure>
     
</figure>

<p>Oluşturduğumuz projemizde yazının başında belirttiğimiz gibi Create , Read , Update ve Delete işlemlerini yapacağımızdan projemizin ihtiyacı olan bazı konfigürasyonları yapmamız gerekmektedir. Bunlardan en önceliği Database bağlantısıdır.
Database bağlantısı için projenin src-&gt;main-&gt;resources uzantısı altında bulunan application.properties dosyasını aşağıdaki örnekteki gibi ayarlıyoruz.</p>
<script type="application/javascript" src="https://gist.github.com/mrpehlivan/0c64633c8596d0a2771d7a235da1bd41.js"></script>

<p>İsterseniz application.properties dosyasının adını application.yml olarak değiştirip yml formatta da ayarları yapabilirsiniz.</p>
<script type="application/javascript" src="https://gist.github.com/mrpehlivan/0db4a3cdfa91ba1b927bed97d1688ca0.js"></script>

<p>Ben default gelen ayarlara devam edeceğim için application.properties dosyasını kullanacağım.</p>
<p>Properties dosyasına yapmış olduğumuz tanımlamaları projemizde 
DatabaseConfiguration.java adında bir konfigürasyon sınıfı içerisinde projemize uygulayacağız. Bunun için src -&gt; main -&gt; java -&gt; com -&gt; arif -&gt;crud uzantısının altına configuration diye bir klasör oluşturup aşağıdaki DatabaseConfiguration.java sınıfını oraya ekliyoruz.</p>
<script type="application/javascript" src="https://gist.github.com/mrpehlivan/86ed6bcdb3f6025f9b1d570e83bc5da4.js"></script>

<p>Database ayarlarını yaptıktan sonra artık localimiz de PostgreSQL&rsquo;e bağlanmamızda bir engel kalmamıştır. Eğer localiniz de indirilmiş bir PostgreSQL yok ise ve local bilgisayarınız da docker yüklü ise aşağıdaki docker-compose dosyasını çalıştırabilir ve hızlıca devam edebilirsiniz.</p>
<script type="application/javascript" src="https://gist.github.com/mrpehlivan/47293acb8b1cfd1af558bf61b71f9db3.js"></script>

<p>Docker compose dosyasını herhangi bir yere indirip aşağıdaki komutları çalıştırmanız yeterli olacaktır. Ben Downloads&rsquo;a indirip ordan çalıştırdım.</p>
<figure>
     
</figure>

<p>Yukarıdaki tüm ayarlamaları yaptıktan sonra projemizde bulunan CrudApplication.java sınıfında bulunan main methodunu çalıştırıyoruz.
Projemiz çalışır hale geldikten sonra proje yapısını oluşturuyoruz. Aşağıdaki resimde örnek yapıyı görebilirsiniz.</p>
<figure>
     
</figure>

<p>Project StructureProje yapısında ;</p>
<ul>
<li>
<p><strong>controllers</strong> = Uygulamanın en dış katmanlarının bulunduğu klasör.</p>
</li>
<li>
<p><strong>dtos</strong> = Uygulamaya gelen istek yapılarının bulunduğu klasör.</p>
</li>
<li>
<p><strong>models</strong> = Entity yani database sınıflarının bulunduğu klasör.</p>
</li>
<li>
<p><strong>repositories</strong> = Repository katmanındaki sınıfların bulunduğu klasör.</p>
</li>
<li>
<p><strong>services</strong> = Service katmanındaki sınıfların bulunduğu klasör.</p>
</li>
</ul>
<p>Yukarıdaki yapıda controllers klasörünün altında DeveloperController.java sınıfı içerisinde tüm developerların <strong>listelenmesi (Read)</strong>, <strong>eklenmesi (Create)</strong>, <strong>silinmesi (Delete)</strong> ve <strong>güncellenmesi (Update)</strong> için gerekli olan methodları görebilirsiniz.</p>
<p>Spring framework de mvc yapısını oluşturmak için aşağıdaki anotasyonlar kullanılır.</p>
<ul>
<li>@Controller</li>
<li>@Service</li>
<li>@Repository</li>
</ul>
<p>En dış katman olan Controller sınıfları Service katmanındaki sınıflar ile etkileşime geçerler.
Etkileşime geçmelerini sağlayan ise Dependency Injection dır. Spring framework de bunu @Autowired anotasyonu ile yapabilirsiniz.</p>
<p>Service katmanında ise Controller sınıfı için gerekli olan methodlar bulunur. Aşağıdaki resimde methodları inceleyebilirsiniz.</p>
<figure>
     
</figure>

<p>Service katmanıda database işlemlerine direk müdahale eden Repository katmanına Dependency Injection yaparak erişim sağlar.</p>
<p>Katmanlar arasındaki etkileşim doğru yapılmaz ise hata durumları oluşur.</p>
<p>Oluşturmuş olduğumuz projemize dışardan nasıl erişilebileceğini Swagger ile döküman haline getirebilir yada Postman collection larını paylaşabiliriz. Bu projede <strong>src -&gt; main -&gt; resources -&gt; static</strong> klasörünün altında Developer.
postman_collection adındaki dosyayı Postman ' e import ederek test edebilirsiniz.</p>
<p>Sonuç olarak, bu yazıda sıfırdan Springboot projesi nasıl oluşturulur , hangi ayarlar yapılmalıdır ve katmanlar nasıl olmalıdırın cevaplarını vermiş oluyoruz. Projenin tamamına <a href="https://github.com/mrpehlivan/medium-crud" target="_blank" rel="noopener noreffer">burdan</a> erişebilirsiniz.</p>
<p>Kolay Gelsin.. 🤞</p>
]]></description>
</item><item>
    <title>Nedir bu Java Stream?</title>
    <link>http://mrpehlivan.github.io/posts/stream/</link>
    <pubDate>Sun, 18 Feb 2018 00:00:00 &#43;0000</pubDate>
    <author></author>
    <guid>http://mrpehlivan.github.io/posts/stream/</guid>
    <description><![CDATA[<p>Stream kelimesini ilk duyduğum zaman aklıma <strong>Java I/O</strong> paketinde
bulunan <strong>InputStream</strong> ve <strong>OutputStream</strong> gelmişti. Fakat bunun böyle
olmadığını api dökümanını inceleyince fark ettim. Bu yazıda streamler
nasıl çalışır , türleri nelerdir ve nasıl kullanılır sorularını
cevaplamaya çalışacağım.</p>
<p>Stream ler fonksiyonel programlama da kullanılan <em><strong>Monad</strong></em> tasarım
kalıplarına çok benzemektedir. Türkçe kelime anlamı akıştır. Bir dizi
öge üzerinde hesaplamalar yapmak ve farklı türde operasyonlar yapmamızı
sağlarlar.</p>
<p><strong>Nasıl çalışır?</strong></p>
<p>Bir stream aslında iki türlü işlem yapar. Bunlar ara işlemler ve
sonlandırıcı işlemlerdir. Ara işlemler işlemin sonucunda Stream dönerken
sonlandırıcı işlemler void yada stream olmayan türde değer döner.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="err">“</span><span class="n">ali</span><span class="err">”</span><span class="o">,</span> <span class="err">“</span><span class="n">veli</span><span class="err">”</span><span class="o">,</span> <span class="err">“</span><span class="n">ahmet</span><span class="err">”</span><span class="o">,</span><span class="err">”</span><span class="n">mehmet</span><span class="err">”</span><span class="o">);</span>
<span class="n">list</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
<span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="err">“</span><span class="n">a</span><span class="err">”</span><span class="o">))</span>
<span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">String</span><span class="o">::</span><span class="n">toUpperCase</span><span class="o">)</span>
<span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
<span class="nl">
</span><span class="nl">Output:</span><span class="n">ALIAHMET</span>
</code></pre></div><p>Örnek olarak yukarıdaki koda baktığımız zaman bir liste içerisinde
bulunan ali, veli, ahmet ve mehmet değerlerini <strong>ara işlem</strong> olan
<strong>filter</strong> ve <strong>map</strong> methodu ile işleme alıp <strong>sonlandırıcı işlem</strong>olan
<strong>forEach</strong> methoduyla konsola çıktılarını basmaktadır. Stream’in tüm
ara ve sonlandırıcı işlemlerine
<a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html" target="_blank" rel="noopener noreffer">buradan</a>
erişebilirsiniz.</p>
<p><strong>Türleri nelerdir?</strong></p>
<p>Streamler ikiye ayrılır. Bunlar <strong>stream()</strong> ve <strong>parallelStream()</strong>
dir. <strong>stream()</strong> methodu bir listede bulunan değerlerin işleme
alınmasında sıralı olarak hareket eder. Fakat <strong>parallelStream(</strong>)
methodu ise liste de bulunan değerleri birbirinden bağımsız olarak
işleme alır. Örnek olarak yukarıda tanımlamış olduğumuz örnek listemizi
<strong>stream()</strong> ve <strong>parallelStream()</strong> methodlarını ayrı ayrı kullanarak
çalıştırırsak <strong>stream()</strong> methodu her zaman bize aşağıdaki sonucu
dönecektir.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="nl">Output:</span><span class="n">ALIAHMET</span>
</code></pre></div><p>Fakat <strong>parallelStream(</strong>) methodu ise ilk değer olarak ALI değerini
önce dönerken bazende AHMET değerini önce dönecektir. parallelStream() ‘
e yazının ilerleyen kısımlarında daha detaylı değineceğiz.</p>
<p>Yukarıdaki örnek de bir stream oluşturmak için List içerisindeki
değerleri .stream() ile işleme almıştık. Aslında buna ihtiyaç duymadan
<strong>Stream.of()</strong> methodu ilede aynı işlemi gerçekleştirebiliriz. Örnek
olarak :</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"> <span class="n">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="err">“</span><span class="n">ali</span><span class="err">”</span><span class="o">,</span> <span class="err">“</span><span class="n">veli</span><span class="err">”</span><span class="o">,</span> <span class="err">“</span><span class="n">ahmet</span><span class="err">”</span><span class="o">,</span><span class="err">”</span><span class="n">mehmet</span><span class="err">””</span><span class="o">)</span>
 <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="err">“</span><span class="n">a</span><span class="err">”</span><span class="o">))</span>
 <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">String</span><span class="o">::</span><span class="n">toUpperCase</span><span class="o">)</span>
 <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
 
 <span class="n">Output</span><span class="o">:</span><span class="n">ALIAHMET</span>
</code></pre></div><p>Java 8 ile ayrıca primitive type lara özgü stream türleride
bulunmaktadır. Örneğin int , double ve long primitive türleri için
<strong>IntStream</strong> , <strong>DoubleStream</strong> ve <strong>LongStream</strong> türleri
bulunmaktadır.</p>
<p>IntStreamler for döngüsü yerinede kullanabiliriz. Aşağıdaki örnek de for
döngüsü ile yapılan bir işlemin IntStream ile yapılmasını göreceğiz.</p>
<p><strong>For döngüsü :</strong></p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span> <span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">10</span> <span class="o">;</span> <span class="n">i</span><span class="o">++){</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">i</span><span class="o">);}</span>
<span class="nl">
</span><span class="nl">Output:</span><span class="n">0123456789</span>
</code></pre></div><p><strong>IntStream :</strong></p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">IntStream</span><span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="n">0</span><span class="o">,</span><span class="n">10</span><span class="o">).</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">print</span><span class="o">);</span>
<span class="nl">
</span><span class="nl">Output:</span><span class="n">0123456789</span>
</code></pre></div><p>Primitive stream ler aritmetik işlemler olan <em><strong>sum</strong></em> , <em><strong>average</strong></em> ,
<em><strong>max</strong></em> , <em><strong>min</strong></em> işlemlerinin kolaylıkla yapılmasını sağlarlar.
Örnek olarak :</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">IntStream</span><span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="n">0</span><span class="o">,</span><span class="n">10</span><span class="o">).</span><span class="na">max</span><span class="o">().</span><span class="na">getAsInt</span><span class="o">());</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">IntStream</span><span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="n">0</span><span class="o">,</span><span class="n">10</span><span class="o">).</span><span class="na">min</span><span class="o">().</span><span class="na">getAsInt</span><span class="o">());</span>

<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">IntStream</span><span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="n">0</span><span class="o">,</span><span class="n">10</span><span class="o">).</span><span class="na">sum</span><span class="o">());</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">IntStream</span><span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="n">0</span><span class="o">,</span><span class="n">10</span><span class="o">).</span><span class="na">average</span><span class="o">().</span><span class="na">getAsDouble</span><span class="o">());</span>
<span class="nl">
</span><span class="nl">Output:</span> <span class="n">9</span> <span class="c1">//max0 //min45 //sum4.5 //average
</span></code></pre></div><p>Ayrıca primitive streamler obje dönüşümlerinde de kullanılabilir. Örnek
olarak :</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">IntStream</span><span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="n">0</span><span class="o">,</span><span class="n">3</span><span class="o">).</span><span class="na">mapToObj</span><span class="o">(</span><span class="n">i</span> <span class="o">-&gt;</span> <span class="err">“</span><span class="n">ali</span><span class="err">”</span><span class="o">+</span><span class="n">i</span><span class="o">).</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
<span class="nl">
</span><span class="nl">Output:</span> <span class="n">ali0ali1ali2</span>
</code></pre></div><p>Stream’in ikinci türü olan <strong>parallelStream</strong> ise işleme alınan
değerleri sıralı olarak değilde birbirlerinden bağımsız olarak işleme
alırlar. Bunu yaparken <em><strong>ForkJoinPool</strong></em> arayüzünün sağlamış olduğu
<em><strong>commonPool</strong></em> methodunu kullanır. Thread pool da default tanımlı olan
thread adedi kadar olan işlemleri paralel olarak çalıştırabilir.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="err">“</span><span class="n">ali</span><span class="err">”</span><span class="o">,</span> <span class="err">“</span><span class="n">veli</span><span class="err">”</span><span class="o">,</span> <span class="err">“</span><span class="n">ahmet</span><span class="err">”</span><span class="o">)</span>
<span class="o">.</span><span class="na">parallelStream</span><span class="o">()</span>
<span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="o">{</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="err">“</span><span class="n">Filter</span><span class="o">:</span> <span class="o">%</span><span class="n">s</span> <span class="o">[%</span><span class="n">s</span><span class="o">]</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="o">,</span> <span class="n">s</span><span class="o">,</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span> <span class="k">return</span> <span class="kc">true</span><span class="o">;</span> <span class="o">})</span>
<span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="o">{</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="err">“</span><span class="n">Map</span><span class="o">:</span> <span class="o">%</span><span class="n">s</span> <span class="o">[%</span><span class="n">s</span><span class="o">]</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="o">,</span> <span class="n">s</span><span class="o">,</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span> <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">toUpperCase</span><span class="o">();</span> <span class="o">})</span>
<span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="err">“</span><span class="n">ForEach</span><span class="o">:</span> <span class="o">%</span><span class="n">s</span> <span class="o">[%</span><span class="n">s</span><span class="o">]</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="o">,</span> <span class="n">s</span><span class="o">,</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()));</span>
<span class="nl">
</span><span class="nl">Output:</span> 
<span class="nl">Filter:</span> <span class="n">ali</span> <span class="o">[</span><span class="n">ForkJoinPool</span><span class="o">.</span><span class="na">commonPool</span><span class="o">-</span><span class="n">worker</span><span class="o">-</span><span class="n">1</span><span class="o">]</span>
<span class="nl">Map:</span> <span class="n">ali</span> <span class="o">[</span><span class="n">ForkJoinPool</span><span class="o">.</span><span class="na">commonPool</span><span class="o">-</span><span class="n">worker</span><span class="o">-</span><span class="n">1</span><span class="o">]</span>
<span class="nl">ForEach:</span> <span class="n">ALI</span> <span class="o">[</span><span class="n">ForkJoinPool</span><span class="o">.</span><span class="na">commonPool</span><span class="o">-</span><span class="n">worker</span><span class="o">-</span><span class="n">1</span><span class="o">]</span>
<span class="nl">Filter:</span> <span class="n">veli</span> <span class="o">[</span><span class="n">main</span><span class="o">]</span>
<span class="nl">Map:</span> <span class="n">veli</span> <span class="o">[</span><span class="n">main</span><span class="o">]</span><span class="n">Filter</span><span class="o">:</span> <span class="n">ahmet</span> <span class="o">[</span><span class="n">ForkJoinPool</span><span class="o">.</span><span class="na">commonPool</span><span class="o">-</span><span class="n">worker</span><span class="o">-</span><span class="n">2</span><span class="o">]</span>
<span class="nl">Map:</span> <span class="n">ahmet</span> <span class="o">[</span><span class="n">ForkJoinPool</span><span class="o">.</span><span class="na">commonPool</span><span class="o">-</span><span class="n">worker</span><span class="o">-</span><span class="n">2</span><span class="o">]</span>
<span class="nl">ForEach:</span> <span class="n">AHMET</span> <span class="o">[</span><span class="n">ForkJoinPool</span><span class="o">.</span><span class="na">commonPool</span><span class="o">-</span><span class="n">worker</span><span class="o">-</span><span class="n">2</span><span class="o">]</span>
<span class="nl">ForEach:</span> <span class="n">VELI</span> <span class="o">[</span><span class="n">main</span><span class="o">]</span>
</code></pre></div><p>Yukarıdaki örnek de <strong>parallelStream</strong> in nasıl çalıştığını daha iyi
görebilirsiniz.</p>
<p>Özetle Java programlama dili, Java 8 versiyonunda yayınlamış olduğu
stream ler ile yazılan kodların daha kolay okunup , güzel görünmesinin
yanında performans açısından da hızlı olmasını sağlamıştır.</p>
<p>Kolay Gelsin.. 🤞</p>
]]></description>
</item><item>
    <title>Tasarım Kalıpları</title>
    <link>http://mrpehlivan.github.io/posts/tasarim-kaliplari/</link>
    <pubDate>Thu, 01 Feb 2018 00:00:00 &#43;0000</pubDate>
    <author></author>
    <guid>http://mrpehlivan.github.io/posts/tasarim-kaliplari/</guid>
    <description><![CDATA[<p>Yazılım projeleri yazılımcılara verilen belirli argümanlar üzerinden
oluşan projelerdir. Genellikle proje geliştirmelerinde büyük resim tam
anlamıyla görüntülenemediğinden projeler zamanla değişmektedirler.Bu
değişimler bazen projelerin yeniden yazılmasını gerektirmektedir. İşte
bu kadar köklü değişimlerin önüne geçmek açısından projelerimizi belirli
tasarım kalıplarına oturtarak ilerler isek değişimlerin maliyetlerini
küçültebiliriz.</p>
<h2 id="nasıl-ortaya-çıkmıştır">Nasıl ortaya çıkmıştır?</h2>
<p>Kalıplar(Patterns) Amerikalı mimar <a href="https://en.wikipedia.org/wiki/Christopher_Alexander" target="_blank" rel="noopener noreffer">Christopher
Alexander</a>
tarafından 1977 yılında mimari konseptler adıyla ortaya çıkmıştır. 1987
yılında <a href="https://en.wikipedia.org/wiki/Kent_Beck" target="_blank" rel="noopener noreffer">Kent Beck</a> ve <a href="https://en.wikipedia.org/wiki/Ward_Cunningham" target="_blank" rel="noopener noreffer">Ward
Cunningham</a> bu kalıpları
kendi deneyimleri ile programlama üzerinde uygulamışlardır ve o yıl
düzenlenen <a href="https://en.wikipedia.org/wiki/OOPSLA" target="_blank" rel="noopener noreffer">OOPSLA</a> konferansında
bu çalışmalarını sunmuşlardır. 1994 yılında çıkan <a href="https://en.wikipedia.org/wiki/Design_Patterns" target="_blank" rel="noopener noreffer">Design Patterns:
Elements of Reusable Object-Oriented Software (Gang of
Four)</a> kitabı ile tasarım
kalıpları bilgisayar bilimlerinde önemli bir popülerlik kazanmıştır.</p>
<h2 id="amacı-nedir">Amacı nedir?</h2>
<p>Tasarım kalıpları yazılım projelerindeki genel problemleri en iyi yolla
çözmeyi planlamaktadır. Deneyimli yazılımcıların object-oriented
konusundaki best practice’ lerinden yararlanılarak farklı türlerde
kalıplar tasarlanmıştır. Tasarlanan bu kalıplar projelerdeki esnekliği,
okunabilirliği ve yazılabilirliği kolaylaştırmaktadırlar.</p>
<h2 id="kaç-adet-tasarım-kalıbı-vardır-ve-türleri-nelerdir">Kaç adet tasarım kalıbı vardır ve türleri nelerdir?</h2>
<p>Gang of Four kitabında da belirtildiği üzere 23 adet tasarım kalıbı
bulunmaktadır. Bu tasarım kalıpları çözümlerine göre 3 adet kategoriye
ayrılmışlardır. Bunlar creational (yaratımsal) , structural (yapısal) ve
behavioral (davranışsal) kalıplardır.</p>
<p></p>
<h2 id="yaratımsal-kalıplar-creational-patterns">Yaratımsal Kalıplar (Creational Patterns)</h2>
<p>Yaratımsal tasarım kalıpları oluşturulacak olan nesnelerin new operatörü
kullanmak yerine farklı yollar ile oluşturmayı sağlar. Bu kategorideki
tasarım kalıpları aşağıda listelenmiştir.</p>
<ul>
<li>Abstract Factory,</li>
<li>Builder,</li>
<li>Factory Method,</li>
<li>Prototype,</li>
<li>Singleton</li>
</ul>
<p>gibi kalıplar yaratışsal kalıplar sınıfına girmektedir.</p>
<p></p>
<h2 id="yapısal-tasarımlar-structural-patterns">Yapısal Tasarımlar (Structural Patterns)</h2>
<p>Yapısal tasarım kalıpları sınıflar ile nesneler arasındaki kalıtım ve
arayüz bağlantılarının kurulmasını sağlar. Bu kategorideki tasarım
kalıpları aşağıda listelenmiştir.</p>
<ul>
<li>Adapter,</li>
<li>Bridge,</li>
<li>Composite,</li>
<li>Decorator,</li>
<li>Facade,</li>
<li>Flyweight,</li>
<li>Proxy</li>
</ul>
<p>gibi kalıplar yapısal kalıplar sınıfına girmektedir.</p>
<p></p>
<h2 id="davranışsal-kalıplar-behavioral-patterns">Davranışsal Kalıplar (Behavioral Patterns)</h2>
<p>Davranışsal tasarım kalıpları, nesneler arasındaki ortak iletişim
kalıplarının tanımlanmasını ve gerçekleşmesini sağlar.Bu kategorideki
tasarım kalıpları aşağıda listelenmiştir.</p>
<ul>
<li>Chain of responsibility,</li>
<li>Command,</li>
<li>Interpreter,</li>
<li>Iterator,</li>
<li>Mediator,</li>
<li>Memento,</li>
<li>Null Object,</li>
<li>Observer,</li>
<li>State,</li>
<li>Strategy,</li>
<li>Template method</li>
</ul>
<p>gibi kalıplar davranışsal tasarım kalıpları sınıfına girmektedir.</p>
<p>Sonuç olarak projelerimizde esnekliği , okunulabilirliği ve
yazabilirliği kolaylaştırmak için tasarım kalıplarını projelerimizde
olabildiğince kullanmayı tercih etmeliyiz.</p>
<p>Kolay Gelsin.. 🤞</p>
]]></description>
</item><item>
    <title>React Js ile Facebook Login Entegrasyonu</title>
    <link>http://mrpehlivan.github.io/posts/react-login/</link>
    <pubDate>Thu, 18 Jan 2018 00:00:00 &#43;0000</pubDate>
    <author></author>
    <guid>http://mrpehlivan.github.io/posts/react-login/</guid>
    <description><![CDATA[<p><strong>React Js ile Facebook Login Entegrasyonu</strong></p>
<p>Uygulamalarda kullanıcı sayısını arttırabilmek için sosyal medya
bağlantılarının yapılması günümüzde büyük önem taşımaktadır. Bu yazıda
<a href="https://reactjs.org/" target="_blank" rel="noopener noreffer">React.js</a>
uygulamamıza<a href="https://www.facebook.com/" target="_blank" rel="noopener noreffer">Facebook</a>’u nasıl entegre
edebileceğimizi göreceğiz.</p>
<p>Entegrasyon yapılırken Facebook’un sağlamış olduğu <a href="https://developers.facebook.com/docs/javascript" target="_blank" rel="noopener noreffer">javascript
sdk</a> dan
yararlanılmıştır.</p>
<p><strong>Facebook Software Development Kit (SDK) ‘in yüklenmesi</strong></p>
<p>Uygulamamızda componentDidMount içerisinde sdk nın sağladığı
Facebook.init methodu ile facebook sdk projeye yüklenir.<br>
FB.init methodu içerisinde 4 adet parametre sayesinde sdk ayarları
yapılmaktadır. Bunlar ;</p>
<p><strong>appId</strong> : Entegre edilen uygulama için Facebook tarafından verilen id.
Aşağıda nasıl oluşturulacağı ile ilgili bilgilendirilme yapılmıştır.<br>
<strong>version</strong> : Entegre olunan sdk versiyonu.<br>
<strong>cookie</strong> : Cookilere izin verilip/verilmeyeceğini belirler.<br>
<strong>xfbml</strong> : Yüklenildiği sayfa üzerinde sosyal pluginlere izin
verilip/verilmeyeceğini belirler.</p>
<p><strong>Nasıl application id oluşturulur ?</strong></p>
<p>Facebook ile entegrasyon yapabilmek için öncelikle bu
<a href="https://developers.facebook.com/apps/" target="_blank" rel="noopener noreffer">linkden</a> entegre edilecek
uygulama için bir uygulama id si alınmalıdır.<br>
<strong>Add a New App</strong> butonuna (sağ üst tarafda) tıklayıp bilgileri
girdikten sonra facebook bizi otomatik olarak hangi entegrasyonları
yapabileceğimizi gösteren bir sayfaya yönlendirir.</p>
<p>Açılan bu sayfada sol üst tarafda bulunan <strong>Dashboard</strong> sekmesine
tıkladığınız zaman uygulamamıza ait <strong>version</strong> ,<strong>application</strong> id ve
<strong>application secret</strong>değerlerine ulaşabiliriz.</p>
<p>Biz burada facebook login entegrasyonu yaptığımız için Facebook Login
quick startına tıklayıp ordan entegrasyonu gerçekleştireceğiz.</p>
<p><strong>Facebook SDK üzerinden login methodunun çağırılması</strong></p>
<p><em>componentDidMount</em> methodu içerisinde sdkı yükledikten sonra Facebook’a
login isteğinde bulunabiliriz.Bunun için window objesine yüklemiş
olduğumuz FB objesi üzerinden login methodunu çağıracağız.</p>
<p>FB.login methodunu ilk parametre olarak callbackMethod ikinci parametre
olarak da login olacak olan kullanıcının hangi bilgileri isteniliyorsa
onlar <strong>scope</strong> objesi içerisinde tanımlanır.<br>
Aşağıdaki kod örneğinde kullanıcının email adresi istenmiştir.</p>
<p><a href="https://developers.facebook.com/docs/facebook-login/permissions" target="_blank" rel="noopener noreffer">Bu
linkden</a>
scope üzerinde hangi dataların çekilebileceğini görebilirsiniz.</p>
<p>Bu işlemlerin sonucunda aşağıdaki kod örneklerinden yararlanarak artık
uygulamanızı facebook login ile entegre etmiş olacaksınız.</p>
<p><strong>Kod Örnekleri</strong></p>
<p><em><strong>FB.login methodunun çağırılması :</strong></em></p>
<div class="highlight"><pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">statusChangeCallback</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>   
    <span class="k">if</span> <span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">status</span> <span class="o">===</span> <span class="err">‘</span><span class="nx">connected</span><span class="err">’</span><span class="p">)</span> <span class="p">{</span>     
        <span class="kr">const</span> <span class="nx">socialData</span> <span class="o">=</span> <span class="p">{</span> 
            <span class="nx">accessToken</span><span class="o">:</span> <span class="nx">response</span><span class="p">.</span><span class="nx">authResponse</span><span class="p">.</span><span class="nx">accessToken</span><span class="p">,</span>
            <span class="nx">expiresIn</span><span class="o">:</span> <span class="nx">response</span><span class="p">.</span><span class="nx">authResponse</span><span class="p">.</span><span class="nx">expiresIn</span><span class="p">,</span>
            <span class="nx">signedRequest</span><span class="o">:</span> <span class="nx">response</span><span class="p">.</span><span class="nx">authResponse</span><span class="p">.</span><span class="nx">signedRequest</span><span class="p">,</span>
            <span class="nx">userID</span><span class="o">:</span> <span class="nx">response</span><span class="p">.</span><span class="nx">authResponse</span><span class="p">.</span><span class="nx">userID</span>     
    <span class="p">};</span>  
         <span class="c1">//Başarılı login   } else if (response.status === ‘not_authorized’) {   // Kullanıcı login oldu, fakat uygulamanıza erişim izni yok   } else {   // Login olunamadı   } } window.FB.login(this.statusChangeCallback, { scope: ‘email,public_profile’ });
</span></code></pre></div><p><em><strong>SDK nın yüklenmesi</strong></em></p>
<div class="highlight"><pre class="chroma"><code class="language-js" data-lang="js">
 <span class="nx">componentDidMount</span><span class="p">()</span> <span class="p">{</span>   <span class="c1">// Load the SDK asynchronously   (function(d, s, id) {   var js, fjs = d.getElementsByTagName(s)[0];   if (d.getElementById(id)) return;   js = d.createElement(s); js.id = id;   js.src = “https://connect.facebook.net/en_US/sdk.js&#34;;   fjs.parentNode.insertBefore(js, fjs);   }(document, ‘script’, ‘facebook-jssdk’));window.fbAsyncInit = function () {  window.FB.init({  appId: facebook.appId,  cookie: true,  xfbml: true,  version: ‘v2.8’ });};}
</span></code></pre></div><p>Facebook developers sitesi üzerinde bulunan örnek
<a href="https://developers.facebook.com/docs/facebook-login/web" target="_blank" rel="noopener noreffer">kod</a> sayfanın
alt kısmında bulunmaktadır.</p>
<p>Kolay Gelsin.. 🤞</p>
]]></description>
</item><item>
    <title>Nedir bu Optional?</title>
    <link>http://mrpehlivan.github.io/posts/optional/</link>
    <pubDate>Tue, 12 Dec 2017 00:00:00 &#43;0000</pubDate>
    <author></author>
    <guid>http://mrpehlivan.github.io/posts/optional/</guid>
    <description><![CDATA[<p>Her yazılımcının yazılım hayatı boyunca en çok karşılaştığı
exceptionlardan biri olan <strong>NullPointerException</strong> Java 8 ile artık
önlenebilir hale gelmiştir.</p>
<p>Bu yazıda Java 8’in yeni özelliklerden biri olan java.util.Optional
sınıfını inceleyeceğiz. Optional sınıfı içerisinde toplamda 15 adet
method bulundurmaktadır.Bu methodlar ile NullPointerException ın nasıl
önleneceğini örnekler ile anlatmaya çalışacağım.</p>
<p><em><strong>of</strong></em> : Bu method Optional türde olmayan herhangi bir nesneyi
Optional türe çevirmek için kullanılır. Tabiki bu nesneye bir değer
atanmış olması gerekmektedir. Eğer NullPointerException almak istiyor
isek of methodunun içerisine null değerini vermemiz yeterlidir. Örnek
olarak ;</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java">    <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">chuck</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&#34;Chuck Norris&#34;</span><span class="o">);</span>
</code></pre></div><p><em><strong>ofNullable</strong></em> : Bu method Optional türde olmayan herhangi bir nesneyi
Optional türe çevirmek için kullanılır. Adındanda anlaşıldığı üzre
atanan değer null olabilir.of methodundan ayrı olarak null değeri
verdiğimiz zaman NullPointerException değilde <strong>NoSuchElementException</strong>
ile karşılaşırız.</p>
<p><em><strong>get</strong></em> : Bu method Optional sınıfı içerisinde oluşturulmuş olan T
tipindeki nesneye erişmek için kullanırız. Örnek olarak yukarıda
oluşturduğumuz chuck nesnesini yazdırmak istediğimiz zaman aşağıdaki
şekilde yazdırabiliriz.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">chuck</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>
</code></pre></div><p><em><strong>empty</strong></em> : Bu method bize boş bir Optional nesnesi üretmemizi sağlar.
Kullanımı</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java">    <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">chuck</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>
</code></pre></div><p>şeklindedir. Tabiki Optional türde bir objenin T tipine erişebilmek için
get() methodu kullanılır. Empty yani boş oluşturulan bir Optional
nesnesini get etmek istersek NoSuchElementException ile karşılaşırız.
Sebebi nesneye henüz bir değer atanmamış olmasıdır.</p>
<p><em><strong>ifPresent</strong></em> : Bu method Optional türde olan bir nesne için eğer
tanımlı ise içerisinde işlem yapılmasına izin verir. Örnek olarak ;</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java">    <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
    <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;Chuck Norris&#34;</span><span class="o">);</span>
    <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;Arif Pehlivan&#34;</span><span class="o">);</span>
    <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;Mario Jardel&#34;</span><span class="o">);</span>
    <span class="n">Optional</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">optList</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
    <span class="n">optList</span><span class="o">.</span><span class="na">ifPresent</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</code></pre></div><p><em><strong>isPresent</strong></em> : Bu method Optional türde olan bir nesnenin tanımlı
olup olmadığını kontrol etmemizi sağlar. Eğer tanımlı ise true değil ise
false değeri döner. Örnek olarak ;</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java">    <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">chuck</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&#34;Chuck Norris&#34;</span><span class="o">);</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">chuck</span><span class="o">.</span><span class="na">isPresent</span><span class="o">()</span> <span class="o">?</span> <span class="s">&#34;Chuck&#34;</span> <span class="o">:</span> <span class="s">&#34;Norris&#34;</span><span class="o">);</span>
</code></pre></div><p><em><strong>map</strong></em> : Bu method Optional türde tanımlı olan bir nesne üzerinde
işlemler yapmamıza olanak sağlar. Örnek olarak ;</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java">    <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">test</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&#34;Arif Pehlivan&#34;</span><span class="o">);</span>
    <span class="n">test</span><span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">String</span><span class="o">::</span><span class="n">length</span><span class="o">);</span>
</code></pre></div><p>yada</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java">    <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
    <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;Chuck Norris&#34;</span><span class="o">);</span>
    <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;Arif Pehlivan&#34;</span><span class="o">);</span>
    <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;Mario Jardel&#34;</span><span class="o">);</span>
    <span class="n">Optional</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">optList</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
    <span class="n">optList</span><span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">List</span><span class="o">::</span><span class="n">size</span><span class="o">).</span><span class="na">get</span><span class="o">();</span>
</code></pre></div><p><em><strong>filter</strong></em> : Bu method Optional türde tanımlı olan bir nesne üzerinde
işlemler yapmamıza olanak sağlar. Örnek olarak ;</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">chuck</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&#34;Chuck Norris&#34;</span><span class="o">);</span>
    <span class="n">chuck</span><span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">i</span> <span class="o">-&gt;</span> <span class="s">&#34;Chuck Norris&#34;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">i</span><span class="o">)).</span><span class="na">ifPresent</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</code></pre></div><p><em><strong>orElse</strong></em> : Bu method Optional türde oluşturulan nesne tanımlı olup
olmasına bakmaksızın verilen değerini döner. Örnek olarak ;</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java">    <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">chuck</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&#34;Chuck Norris&#34;</span><span class="o">);</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">chuck</span><span class="o">.</span><span class="na">orElse</span><span class="o">(</span><span class="n">testOrElse</span><span class="o">()));</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">testOrElse</span><span class="o">(){</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Dur yapma&#34;</span><span class="o">);</span>
    <span class="o">}</span>
</code></pre></div><p>Bu örnekde sistem çıktısına önce Dur yapma değerini ardından Chuck
Norris değerini dönecektir.</p>
<p><em><strong>orElseGet</strong></em> : Yukarıdaki orElse methodundan farklı olarak orElse
içerisindeki değer Optional’ın empty olup olmasına bakmaksızın direk
çalışır. orElseGet ise Optional empty ise çalışır.</p>
<p><em><strong>orElseThrow</strong></em> : Bu method Optional türde oluşturulan bir nesne için
gerekli durumda exception fırlatır. Örnek olarak ;</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java">    <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">str</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">orElseThrow</span><span class="o">(</span><span class="n">IllegalArgumentException</span><span class="o">::</span><span class="k">new</span><span class="o">));</span>
</code></pre></div><p>Yukarıda Optional sınıfının sağlamış olduğu kolaylıkları anlatmaya
çalıştım. Daha detaylı bilgi almak isterseniz <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html" target="_blank" rel="noopener noreffer">bu
linkden</a>
inceleyebilirsiniz.</p>
<p>Kolay Gelsin.. 🤞</p>
]]></description>
</item><item>
    <title>Senkron vs Asenkron Programlama</title>
    <link>http://mrpehlivan.github.io/posts/completable-future/</link>
    <pubDate>Sat, 13 May 2017 00:00:00 &#43;0000</pubDate>
    <author></author>
    <guid>http://mrpehlivan.github.io/posts/completable-future/</guid>
    <description><![CDATA[<p>Senkron programlama, yazılımda her bir işlemin sıra ile yapılmasıdır.
Örneğin süpermarketlerdeki kasa kuyruğunda bir önceki müşteri,
ürünlerinin ödemesini yapmadan sizin ürünlerinize sıra gelmemektedir.</p>
<p>Beklerken yaşanan zaman kaybı Asenkron programlamada ortadan kalkar.
Asenkron programlama; işlemlerin birbirini beklemeden , bağımsız olarak
gerçekleşmesidir. Süpermarket örneğinden devam edecek olursak, Asenkron
programlama; her müşterinin sıra beklemeden istediği kasadan ödeme
yapabilmesini sağlamaktadır.</p>
<p>Java programlama dili Java 8 ile birlikte Asenkron programlamaya da
ilgisini arttırmıştır. CompletableFuture arayüzü Java’nın Asenkron
programlama için kullanılan bir sınıfıdır. CompletableFuture
java.util.concurrent paketi içinde bulunmaktadır. Java 8 öncesi Guava
Framework’un de ListenableFuture olarak kullanılmaktadır.</p>
<p>CompletableFuture sınıfı temelde Future ve CompletionStage arayüz
sınıflarından türemektedir. CompletionStage arayüzü callback
methodların, Future sınıfı ise Asenkron işlemlerin hesaplanmasını
kapsamaktadır. CompletableFuture sınıfı toplamda 59 adet metot
içermektedir. Tüm metotları detaylı olarak buradan inceleyebilirsiniz.
CompletableFuture arayüzü ile geliştirdiğimiz programda, sık kullanılan
işlemlerin süresini azaltabiliriz.</p>
<p>Peki ya Senkron çalışan bir metot, Asenkron olarak nasıl kullanılır?</p>
<h3 id="senkron-çalışan-örnek">Senkron çalışan örnek</h3>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java">    <span class="kd">interface</span> <span class="nc">UserService</span> <span class="o">{</span> 
    <span class="n">User</span> <span class="nf">findUserById</span><span class="o">(</span><span class="n">String</span> <span class="n">userId</span><span class="o">);</span> 
    <span class="o">}</span>
    <span class="kd">class</span> <span class="nc">UserServiceImpl</span> <span class="kd">implements</span> <span class="n">UserService</span> <span class="o">{</span>
     
    <span class="nd">@Override</span> 
    <span class="n">User</span> <span class="nf">findUserById</span><span class="o">(</span><span class="n">String</span> <span class="n">userId</span><span class="o">)</span> <span class="o">{</span> 
     <span class="k">return</span> <span class="n">findUser</span><span class="o">(</span><span class="n">userId</span><span class="o">);</span> 
     <span class="o">}</span> 
     <span class="kd">private</span> <span class="n">User</span> <span class="nf">findUser</span><span class="o">(</span><span class="n">String</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span> <span class="err">…</span> <span class="o">}</span> 
    <span class="o">}</span>
</code></pre></div><h3 id="asenkron-çalışan-örnek">Asenkron çalışan örnek</h3>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java">    <span class="kd">interface</span> <span class="nc">UserService</span> <span class="o">{</span> 
    <span class="n">CompletableFuture</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="nf">findUserById</span><span class="o">(</span><span class="n">String</span> <span class="n">userId</span><span class="o">);</span> 
    <span class="o">}</span>
    <span class="kd">class</span> <span class="nc">UserServiceImpl</span> <span class="kd">implements</span> <span class="n">UserService</span> <span class="o">{</span> 
    <span class="nd">@Override</span> 
    <span class="n">CompletableFuture</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="nf">findUserById</span><span class="o">(</span><span class="n">String</span> <span class="n">userId</span><span class="o">)</span> <span class="o">{</span> 
     <span class="k">return</span> <span class="n">CompletableFuture</span><span class="o">.</span><span class="na">supplyAsync</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">findUser</span><span class="o">(</span><span class="n">userId</span><span class="o">));</span> 
     <span class="o">}</span> 
    <span class="kd">private</span> <span class="n">User</span> <span class="nf">findUser</span><span class="o">(</span><span class="n">String</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span> <span class="err">…</span> <span class="o">}</span>
    <span class="o">}</span>
</code></pre></div><p>CompletableFuture’da dikkat edilmesi gereken en önemli nokta; Asenkron
işlemleri Senkron’a dönüştürmemektedir. Örneğin; CompletableFuture
arayüzünün sahip olduğu .join() metodu, ilgili işlem tamamlanana kadar
diğer tüm işlemleri bekletmektedir. Bu yüzden art arda çağrılan
işlemlerde join kullanmamaya dikkat edilmesi gerekmektedir. Bunun yerine
.get(long timeout, TimeUnit unit) metodu kullanılabilir. Bu metot
sayesinde çok uzun süren işlemlerin, diğer işlemleri bekletmemesi için o
işleme bir time out değeri verilir ve işlemlerin birbirini
engellemesinin önüne geçilir.</p>
<p>Sonuç olarak Asenkron programlamayı Senkron programlamayla
karşılaştırırsak; Asenkron programlama, işlemlerimizi daha hızlı
yapmamızı sağlamaktadır.Java programlama dili Java 8 ile çıkarmış olduğu
CompletableFuture arayüzünü Java 9 ile de geliştirmeye devam etmektedir.</p>
<p>Kolay Gelsin.. 🤞</p>
]]></description>
</item><item>
    <title>Vue.js</title>
    <link>http://mrpehlivan.github.io/posts/vuejs/</link>
    <pubDate>Thu, 12 Jan 2017 00:00:00 &#43;0000</pubDate>
    <author></author>
    <guid>http://mrpehlivan.github.io/posts/vuejs/</guid>
    <description><![CDATA[<p>Merhabalar bu yazımda Vue.js den bahsedeceğim. Vue.js web arayüzleri
oluşturmak için geliştirilen bir JavaScript kütüphanesidir. Evan You
tarafından geliştirilmeye başlanmıştır. Benzerlerinin aksine öğrenimi
kolay ve basittir. Ayrıca moduler yapı oluşturmak için alt yapıya
sahiptir.</p>
<h4 id="neden-vue-js-i-kullanalım">Neden Vue.js i kullanalım?</h4>
<p>JavaScript’in kolayca yazılabilmesine olanak sağlamaktadır. Vue.js ile
başlamak son derece kolaydır. Dokümantasyonları sayesinde öğrenimi kolay
ve kaynak kodu oldukça fazladır. Dış kütüphanelere ihtiyacınız yoktur.
JQuery olmadan da kullanabilirsiniz. Pek çok eklenti olmasına rağmen
herhangi bir eklenti kurmanıza gerek kalmamaktadır. Ayrıca Github veya
web üzerinde örnek projeler ve yazılar oldukça fazladır.</p>
<h4 id="vue-js-vs-diğer-frameworkler">Vue.js vs Diğer Frameworkler</h4>
<p>Angular : – Vue.js API ve Tasarım açısından Angular’a göre daha
kolaydır. Hızlı bir şekilde öğrenip, kolayca uygulama geliştirmeye
başlayabiliyorsunuz. – Vue.js Angular’a göre daha esnek bir yapıdadır.
Angular gibi her şeyi onun istediği gibi yapmanızı isteyen, içerisinde
belki kullanmayacağınız onlarca özellik olan bir yapı değil. Vue’da
interface katmanı bulunuyor. Böylelikle kullanmadığınız özellikler
yüzünden projeniz büyümüyor.</p>
<p>React : – React’a nazaran vue.js ile çalışmak daha basit ve kolaydır. –
Bir çok benzerlikleri bulunmaktadır.</p>
<p>Daha detaylı karşılaştırmaları görmek için bu link’etıklayabilirsiniz.</p>
<p>Sonuç olarak öğrenimi kolay ve basit olan bir framework ile hızlıca
projeler geliştirebilir ve güzel sonuçlar alabilirsiniz. Örnek modüler
bir proje yapısı isterseniz Github adresimden forklayabilirsiniz. Yada
<a href="https://github.com/mrpehlivan/vue-2.0-boilerplate" target="_blank" rel="noopener noreffer">buradan</a> direk
erişebilirsiniz.</p>
<p>Yardımcı olabilecek linkler :<br>
Vue.js : <a href="https://vuejs.org/" target="_blank" rel="noopener noreffer">https://vuejs.org/</a><br>
Awesome Vue :
<a href="https://github.com/vuejs/awesome-vue" target="_blank" rel="noopener noreffer">https://github.com/vuejs/awesome-vue</a></p>
<p>Kolay Gelsin.. 🤞</p>
]]></description>
</item></channel>
</rss>
