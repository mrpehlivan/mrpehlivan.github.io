<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>completable-future - tag - Arif Pehlivan</title>
        <link>http://www.arifpehlivan.com/tags/completable-future/</link>
        <description>completable-future - tag - Arif Pehlivan</description>
        <generator>Hugo -- gohugo.io</generator><language>tr</language><managingEditor>m.arifpehlivan@gmail.com (Arif Pehlivan)</managingEditor>
            <webMaster>m.arifpehlivan@gmail.com (Arif Pehlivan)</webMaster><lastBuildDate>Sat, 13 May 2017 00:00:00 &#43;0000</lastBuildDate><atom:link href="http://www.arifpehlivan.com/tags/completable-future/" rel="self" type="application/rss+xml" /><item>
    <title>Senkron vs Asenkron Programlama</title>
    <link>http://www.arifpehlivan.com/posts/completable-future/</link>
    <pubDate>Sat, 13 May 2017 00:00:00 &#43;0000</pubDate>
    <author></author>
    <guid>http://www.arifpehlivan.com/posts/completable-future/</guid>
    <description><![CDATA[<p>Senkron programlama, yazılımda her bir işlemin sıra ile yapılmasıdır.
Örneğin süpermarketlerdeki kasa kuyruğunda bir önceki müşteri,
ürünlerinin ödemesini yapmadan sizin ürünlerinize sıra gelmemektedir.</p>
<p>Beklerken yaşanan zaman kaybı Asenkron programlamada ortadan kalkar.
Asenkron programlama; işlemlerin birbirini beklemeden , bağımsız olarak
gerçekleşmesidir. Süpermarket örneğinden devam edecek olursak, Asenkron
programlama; her müşterinin sıra beklemeden istediği kasadan ödeme
yapabilmesini sağlamaktadır.</p>
<p>Java programlama dili Java 8 ile birlikte Asenkron programlamaya da
ilgisini arttırmıştır. CompletableFuture arayüzü Java’nın Asenkron
programlama için kullanılan bir sınıfıdır. CompletableFuture
java.util.concurrent paketi içinde bulunmaktadır. Java 8 öncesi Guava
Framework’un de ListenableFuture olarak kullanılmaktadır.</p>
<p>CompletableFuture sınıfı temelde Future ve CompletionStage arayüz
sınıflarından türemektedir. CompletionStage arayüzü callback
methodların, Future sınıfı ise Asenkron işlemlerin hesaplanmasını
kapsamaktadır. CompletableFuture sınıfı toplamda 59 adet metot
içermektedir. Tüm metotları detaylı olarak buradan inceleyebilirsiniz.
CompletableFuture arayüzü ile geliştirdiğimiz programda, sık kullanılan
işlemlerin süresini azaltabiliriz.</p>
<p>Peki ya Senkron çalışan bir metot, Asenkron olarak nasıl kullanılır?</p>
<h3 id="senkron-çalışan-örnek">Senkron çalışan örnek</h3>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java">    <span class="kd">interface</span> <span class="nc">UserService</span> <span class="o">{</span> 
    <span class="n">User</span> <span class="nf">findUserById</span><span class="o">(</span><span class="n">String</span> <span class="n">userId</span><span class="o">);</span> 
    <span class="o">}</span>
    <span class="kd">class</span> <span class="nc">UserServiceImpl</span> <span class="kd">implements</span> <span class="n">UserService</span> <span class="o">{</span>
     
    <span class="nd">@Override</span> 
    <span class="n">User</span> <span class="nf">findUserById</span><span class="o">(</span><span class="n">String</span> <span class="n">userId</span><span class="o">)</span> <span class="o">{</span> 
     <span class="k">return</span> <span class="n">findUser</span><span class="o">(</span><span class="n">userId</span><span class="o">);</span> 
     <span class="o">}</span> 
     <span class="kd">private</span> <span class="n">User</span> <span class="nf">findUser</span><span class="o">(</span><span class="n">String</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span> <span class="err">…</span> <span class="o">}</span> 
    <span class="o">}</span>
</code></pre></div><h3 id="asenkron-çalışan-örnek">Asenkron çalışan örnek</h3>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java">    <span class="kd">interface</span> <span class="nc">UserService</span> <span class="o">{</span> 
    <span class="n">CompletableFuture</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="nf">findUserById</span><span class="o">(</span><span class="n">String</span> <span class="n">userId</span><span class="o">);</span> 
    <span class="o">}</span>
    <span class="kd">class</span> <span class="nc">UserServiceImpl</span> <span class="kd">implements</span> <span class="n">UserService</span> <span class="o">{</span> 
    <span class="nd">@Override</span> 
    <span class="n">CompletableFuture</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="nf">findUserById</span><span class="o">(</span><span class="n">String</span> <span class="n">userId</span><span class="o">)</span> <span class="o">{</span> 
     <span class="k">return</span> <span class="n">CompletableFuture</span><span class="o">.</span><span class="na">supplyAsync</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">findUser</span><span class="o">(</span><span class="n">userId</span><span class="o">));</span> 
     <span class="o">}</span> 
    <span class="kd">private</span> <span class="n">User</span> <span class="nf">findUser</span><span class="o">(</span><span class="n">String</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span> <span class="err">…</span> <span class="o">}</span>
    <span class="o">}</span>
</code></pre></div><p>CompletableFuture’da dikkat edilmesi gereken en önemli nokta; Asenkron
işlemleri Senkron’a dönüştürmemektedir. Örneğin; CompletableFuture
arayüzünün sahip olduğu .join() metodu, ilgili işlem tamamlanana kadar
diğer tüm işlemleri bekletmektedir. Bu yüzden art arda çağrılan
işlemlerde join kullanmamaya dikkat edilmesi gerekmektedir. Bunun yerine
.get(long timeout, TimeUnit unit) metodu kullanılabilir. Bu metot
sayesinde çok uzun süren işlemlerin, diğer işlemleri bekletmemesi için o
işleme bir time out değeri verilir ve işlemlerin birbirini
engellemesinin önüne geçilir.</p>
<p>Sonuç olarak Asenkron programlamayı Senkron programlamayla
karşılaştırırsak; Asenkron programlama, işlemlerimizi daha hızlı
yapmamızı sağlamaktadır.Java programlama dili Java 8 ile çıkarmış olduğu
CompletableFuture arayüzünü Java 9 ile de geliştirmeye devam etmektedir.</p>
<p>Kolay Gelsin.. 🤞</p>
]]></description>
</item></channel>
</rss>
